----------------------------------------------编程哲学-----------------------------------------
 * 软件设计的原则：低藕合（正交性）、高内聚（紧凑性）。
 * 软件应该是分层的，每层的模块之间应该保持最小粒度。
 * 软件的设计方向：自顶向下和自底向上。其中自底向上适合需求不明确，后期可能变化的情况。
 * 数据结构应该最小化，不要太追求通用，否则会增加冗余。
 * 软件的主要层次为基础模块和上层逻辑，中间的胶水层应该尽可能的薄。
 * 简洁、清晰、透明原则。
 * 软件设计的目标：可靠性、性能、扩展性、可读性。
 * 函数的组成应该是：返回int值（0-正确，<0-错误码）或（>0-操作成功的结果对象，0-操作失败）、输入参数、输出参数。
 * 函数体的组成应该是：输入参数检查、正确路径、错误分支处理（错误输出或容错处理）。
 * 客户端和服务端之间的协议用文本方式，两个服务端之间协议或进程内部数据存储用二进制结构体。
    用命令码来区分动作请求，用协议版本号来做多版本客户端的兼容。
 * 技术栈：linux + C + vim + makefile + gcc + gdb + git
 * 任何复杂的事情都是由多个简单的事情构成的，把每个简单的事情做好了，复杂的事情也就做好了。
 * 服务器性能四大杀手：数据拷贝、环境切换、内存分配、锁竞争。
 * 网络安全的要素：来源合法性、数据完整性、数据保密性。
 * 计算机，就是数学和物理的交叉学科。中学的时候，我最喜欢的就是数学和物理；另外还有两门感兴趣的学科，是历史和经济学。

----------------------------------------------设计技巧-----------------------------------------
 * 继承的妙用在于：不但可以提取公共的数据，还可以提取出公共的代码，将其放入父类。从而达到数据和代码零重复的效果。
 * 类通用的，设置成类的静态成员变量和函数；
   全局通用的，才设置成全局变量和函数。
 * static关键字的作用：
   1、使全局变量和函数，只能在本文件内可见，达到封装的效果。其他文件内可以有同名的变量和函数。
   2、修饰类的静态成员变量和静态成员函数。
   3、修饰函数内的局部静态变量。
 * 函数参数过多，可改成结构体，传指针进去。
 * 多个bool值的组合可用位表示。
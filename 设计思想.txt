1、软件设计的原则：低藕合（正交性）、高内聚（紧凑性）。
2、软件应该是分层的，每层的模块之间应该保持最小粒度。
3、软件的设计方向：自顶向下和自底向上。其中自底向上适合需求不明确，后期可能变化的情况。
4、数据结构应该最小化，不要太追求通用，否则会增加冗余。
5、软件的主要层次为基础模块和上层逻辑，中间的胶水层应该尽可能的薄。
6、简洁、清晰、透明原则。
7、软件设计的目标：可靠性、性能、扩展性、可读性。
8、函数的组成应该是：返回int值（0-正确，非0-错误码）、输入参数、输出参数。
9、函数体的组成应该是：输入参数检查、正确输出、错误处理（错误输出或容错处理）。
10、函数参数过多，可改成结构体，传指针进去。
11、多个bool值的组合可用位表示。
12、客户端和服务端之间的协议用文本方式，两个服务端之间协议或进程内部数据存储用二进制结构体。
    用命令码来区分动作请求，用协议版本号来做多版本客户端的兼容。
13、新架构构思：libev + uthread + c-collection + pbc，用C语言做。
14、任何复杂的事情都是由多个简单的事情构成的，把每个简单的事情做好了，复杂的事情也就做好了。
15、服务器性能四大杀手：数据拷贝、环境切换、内存分配、锁竞争。
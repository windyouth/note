            < -- makefile命令 -- >
 * make -C dirname : 进入目录后再执行make命令
 * make -f filename : 显式地指定文件为Makefile
 * make -s/-n : 检查Makefile文件的语法，过程中不显示/显示命令。
 * Makefile文件的组成部分：目标、依赖项、命令
 * Makefile文件中的命令必须以tab键开始；如果要让两条命令组合执行，必须放在同一行，用分号分隔。
 * make -i /.IGNORE/命令前加- : 全局/规则/命令中忽略错误的方法。
 * make -k/--keep-going : 终止命令出错的规则，但其他规则继续执行。
 * = 赋值	:= 只能使用前面定义好的变量 	
   ?= 前面没有被定义过才赋值	+= 追加值
 * %.o : 所有以.o结尾的目标
   $@ : 目标的集合 			$< : 依赖文件列表中第一个文件
   $^ : 依赖文件列表的集合		$? : 依赖文件列表中被改变过的所有文件的集合
 * make的隐式规则，在指定同样的显示规则后，隐式规则将会失效。如：%.o: %.c，此时头文件更改后makefile无法检测到，需要写成：%.o: %.c %.h
 * src = $(filter-out test0.c test1.c, $(wildcard *.c)) : 过滤掉某些文件

            < -- gcc命令 -- >
 * gcc hello.c -o hello -I/home/include: 编绎时指定包含目录
 * gcc hello.c -o hello -L/home/lib: 编绎时附加库目录
 * 环境变量中: C_INCLUDE_PATH:头文件包含路径  LIBRARY_PATH:库文件路径  LD_LIBRARY_PATH:动态库路径
 * gcc hello.c -o hello 动态库路径: 编绎时连接动态库
 * gcc hello.c -o hello.so -shared -fpic: 将源文件编绎为动态库文件
 * gcc -x c hello.c -o hello: 指定按C语言方式来编绎hello.c
 * gcc libev_test.c -L /usr/local/lib -lev : 编绎时从指定目录下链接libev.so动态库
 * gcc libev_test.c -L /usr/local/lib -lev -static : 强制链接静态库而忽略动态库
 * gcc -c main.c : 只编绎不连接，生成main.o目标程序。
 * gcc -MM main.c : 自动寻找包含的头文件，生成依赖关系。
 * ldd main : 查看生成的文件的动态库依赖关系表
 * gcc -D TEST : 编绎时在代码中添加#define TEST
 * gcc -E hello.c -o hello.i : 预编绎展开，对于检查宏非常有用。